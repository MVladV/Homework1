class Product:

    def __init__(self, price, description, dimensions):
        if not isinstance(price, int):
            raise TypeError()
        elif not isinstance(description, str):
            raise TypeError()
        elif not isinstance(dimensions, int):
            raise TypeError()            
        else:
            self.__dimensions = dimensions
            self.__description = description
            self.__price = price
        
    def __str__(self):
        return f'price = {self.__price}, dimensions = {self.__dimensions}, description = {self.__description}' 

    def get_prices(self):
        return self.__price      

    
class Customer:

    def __init__(self, name, surname, patronymic, phone):
        if not isinstance(name, str):
            raise TypeError()
        elif not isinstance(surname, str):
            raise TypeError()
        elif not isinstance(patronymic, str):
            raise TypeError()
        elif not isinstance(phone, str):
            raise TypeError()                
        else:
            self.__name = name
            self.__surname = surname
            self.__patronymic = patronymic           
            self.__phone = phone  
    
    def __str__(self):
        return f'Name = {self.__name},\nSurname = {self.__surname},\nPatronymic = {self.__patronymic},\nPhone = {self.__phone}' 


class Order():

    def __init__(self, amount, price):
        if not isinstance(amount, int):
            raise TypeError()
        else:
            self.__amount = amount
            self.__price = price  

    def __str__(self):
        return str(self.__amount * self.__price)               


def main():
    try:
        product = Product(1200, "Drill", 13)
        print(product)
        cust = Customer("Vlad", "Mytlitskiy", "Vitalievich", "+380964058502")
        print(cust)
        pr = product.get_prices()
        orders = Order(100, pr)
        print(orders)

    except Exception:
        print("Exeption!")
main()
